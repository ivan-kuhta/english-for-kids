{"version":3,"sources":["types/header.ts","components/card/Card.tsx","store/reducers/headerReducer.ts","types/words.ts","data/cards.ts","store/reducers/wordsReducer.ts","types/play.ts","store/reducers/playReducer.ts","types/statistic.ts","store/reducers/statisticReducer.ts","store/reducers/index.ts","store/index.ts","store/actions/header.ts","components/menu-items/menu-item/MenuItem.tsx","components/menu-items/MenuItems.tsx","pages/MainPage.tsx","store/actions/words.ts","store/actions/statistic.ts","store/actions/play.ts","components/switch-box/SwitchBox.tsx","components/header/Header.tsx","components/ChecksBar/ChecksBar.tsx","components/words-list/word-item/WordItem.tsx","components/words-list/WordsList.tsx","pages/CategoryPage.tsx","components/sidebar/Sidebar.tsx","components/statistic-table/th/Th.tsx","components/statistic-table/td/Td.tsx","components/statistic-table/tr/Tr.tsx","components/statistic-table/StatisticTable.tsx","pages/StatisticPage.tsx","pages/HardwordsPage.tsx","components/app/App.tsx","components/app/index.ts","index.tsx"],"names":["HeaderActionTypes","Card","className","this","props","class","children","Component","WordsActionTypes","initialState","sidebar","cards","categories","id","name","image","words","word","translation","audioSrc","PlayActionTypes","StatisticActionTypes","playMode","start","errors","checks","data","rootReducer","combineReducers","header","state","action","type","TOGGLE_SIDEBAR","SET_SIDEBAR","value","GET_WORDS","wordsCategory","payload","CLEAR_WORDS_CATEGORY","undefined","play","TOGGLE_PLAY_MODE","PLAY_GAME","RANDOM_WORD","activeWord","randomWord","PLAY_SOUND","CHECK_WORD","checkWord","filter","END_GAME","endGame","RESUME_GAME","statistic","FETCH_STATISTIC","FILTER_STATISTIC","fieldFilter","field","ascFilter","asc","store","createStore","toggleSidebar","dispatch","MenuItem","to","href","onClick","card","src","alt","title","MenuItems","map","category","index","visibleCard","connect","MainPage","getWords","indexCategory","findIndex","find","addStatisticLS","stringState","localStorage","getItem","JSON","stringify","correct","incorrect","trained","setItem","parseState","parse","getHardWords","fetchStatistic","sort","a","b","wordState","percentage","slice","categoryName","wordName","getWord","wordsState","getState","wordStatisticLS","wordStatistic","parseWord","flat","Math","floor","random","length","playSound","audio","Audio","resumeGame","SwitchBox","checked","onChange","Header","disabled","ChecksBar","check","WordItem","playing","flipped","prevProps","setState","addEventListener","checkCard","playAudio","onMouseLeave","aria-disabled","cardHandler","e","stopPropagation","WordsList","CategoryPage","redirect","match","params","changeWords","setTimeout","Sidebar","open","Th","filterStatistic","Td","Tr","StatisticTable","fields","stateWord","key","StatisticPage","clear","HardwordsPage","hardwords","App","path","exact","render","matchProps","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3f5258f6.chunk.js","sourcesContent":["export interface HeaderState {\n  sidebar: boolean;\n}\n\nexport enum HeaderActionTypes {\n  TOGGLE_SIDEBAR = 'TOGGLE_SIDEBAR',\n  SET_SIDEBAR = 'SET_SIDEBAR'\n}\n\ninterface ToggleSidebarAction {\n  type: HeaderActionTypes.TOGGLE_SIDEBAR;\n}\n\ninterface SetSidebarAction {\n  type: HeaderActionTypes.SET_SIDEBAR;\n  value: boolean;\n}\n\n\nexport type HeaderAction = ToggleSidebarAction | SetSidebarAction;","import React, { Component } from 'react';\n\nimport './card.scss';\n\nclass Card extends Component<{ class?: string }> {\n  render() {\n    return (\n      <div className={this.props.class ? `card ${this.props.class}`: `card`}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Card;","import { HeaderAction, HeaderActionTypes, HeaderState } from \"../../types/header\"\n\nconst initialState: HeaderState = {\n  sidebar: false\n}\n\nexport const headerReducer = (state = initialState, action: HeaderAction): HeaderState => {\n  switch(action.type) {\n    case HeaderActionTypes.TOGGLE_SIDEBAR:\n      return { sidebar: !state.sidebar }\n    case HeaderActionTypes.SET_SIDEBAR:\n      return { sidebar: action.value }\n    default:\n      return state\n  }\n}","import CategoryModel from \"../models/category\";\nimport WordModel from \"../models/word\";\n\nexport interface WordsState {\n  categories: CategoryModel[];\n  words: WordModel[][];\n  wordsCategory?: WordModel[]\n}\n\nexport enum WordsActionTypes {\n  GET_WORDS = \"GET_WORDS\",\n  CLEAR_WORDS_CATEGORY = \"CLEAR_WORDS_CATEGORY\"\n}\n\ninterface GetWordsAction {\n  type: WordsActionTypes.GET_WORDS;\n  payload: WordModel[];\n}\n\ninterface ClearWordsAction {\n  type: WordsActionTypes.CLEAR_WORDS_CATEGORY;\n}\n\nexport type WordsAction = GetWordsAction | ClearWordsAction;","import { WordsState } from \"../types/words\";\n\nconst cards: WordsState = {\n  categories: [\n    {\n      id: \"action-set-a\",\n      name: \"Action (set A)\",\n      image: \"img/words/dance.jpg\",\n    },\n    {\n      id: \"action-set-b\",\n      name: \"Action (set B)\",\n      image: \"img/words/swim.jpg\",\n    },\n    {\n      id: \"animal-set-a\",\n      name: \"Animal (set A)\",\n      image: \"img/words/rabbit.jpg\",\n    },\n    {\n      id: \"animal-set-b\",\n      name: \"Animal (set B)\",\n      image: \"img/words/mouse.jpg\",\n    },\n    {\n      id: \"clothes\",\n      name: \"Clothes\",\n      image: \"img/words/blouse.jpg\",\n    },\n    {\n      id: \"emotions\",\n      name: \"Emotions\",\n      image: \"img/words/happy.jpg\",\n    },\n    {\n      id: \"fruit\",\n      name: \"Fruit\",\n      image: \"img/words/pineapple.jpg\",\n    },\n    {\n      id: \"vegetable\",\n      name: \"Vegetable\",\n      image: \"img/words/tomato.jpg\",\n    },\n  ],\n  words: [\n    [\n      {\n        word: \"cry\",\n        translation: \"плакать\",\n        image: \"img/words/cry.jpg\",\n        audioSrc: \"audio/cry.mp3\",\n      },\n      {\n        word: \"dance\",\n        translation: \"танцевать\",\n        image: \"img/words/dance.jpg\",\n        audioSrc: \"audio/dance.mp3\",\n      },\n      {\n        word: \"dive\",\n        translation: \"нырять\",\n        image: \"img/words/dive.jpg\",\n        audioSrc: \"audio/dive.mp3\",\n      },\n      {\n        word: \"draw\",\n        translation: \"рисовать\",\n        image: \"img/words/draw.jpg\",\n        audioSrc: \"audio/draw.mp3\",\n      },\n      {\n        word: \"fish\",\n        translation: \"ловить рыбу\",\n        image: \"img/words/fish.jpg\",\n        audioSrc: \"audio/fish.mp3\",\n      },\n      {\n        word: \"fly\",\n        translation: \"летать\",\n        image: \"img/words/fly.jpg\",\n        audioSrc: \"audio/fly.mp3\",\n      },\n      {\n        word: \"hug\",\n        translation: \"обнимать\",\n        image: \"img/words/hug.jpg\",\n        audioSrc: \"audio/hug.mp3\",\n      },\n      {\n        word: \"jump\",\n        translation: \"прыгать\",\n        image: \"img/words/jump.jpg\",\n        audioSrc: \"audio/jump.mp3\",\n      },\n    ],\n    [\n      {\n        word: \"open\",\n        translation: \"открывать\",\n        image: \"img/words/open.jpg\",\n        audioSrc: \"audio/open.mp3\",\n      },\n      {\n        word: \"play\",\n        translation: \"играть\",\n        image: \"img/words/play.jpg\",\n        audioSrc: \"audio/play.mp3\",\n      },\n      {\n        word: \"point\",\n        translation: \"указывать\",\n        image: \"img/words/point.jpg\",\n        audioSrc: \"audio/point.mp3\",\n      },\n      {\n        word: \"ride\",\n        translation: \"ездить\",\n        image: \"img/words/ride.jpg\",\n        audioSrc: \"audio/ride.mp3\",\n      },\n      {\n        word: \"run\",\n        translation: \"бегать\",\n        image: \"img/words/run.jpg\",\n        audioSrc: \"audio/run.mp3\",\n      },\n      {\n        word: \"sing\",\n        translation: \"петь\",\n        image: \"img/words/sing.jpg\",\n        audioSrc: \"audio/sing.mp3\",\n      },\n      {\n        word: \"skip\",\n        translation: \"пропускать, прыгать\",\n        image: \"img/words/skip.jpg\",\n        audioSrc: \"audio/skip.mp3\",\n      },\n      {\n        word: \"swim\",\n        translation: \"плавать\",\n        image: \"img/words/swim.jpg\",\n        audioSrc: \"audio/swim.mp3\",\n      },\n    ],\n    [\n      {\n        word: \"cat\",\n        translation: \"кот\",\n        image: \"img/words/cat.jpg\",\n        audioSrc: \"audio/cat.mp3\",\n      },\n      {\n        word: \"chick\",\n        translation: \"цыплёнок\",\n        image: \"img/words/chick.jpg\",\n        audioSrc: \"audio/chick.mp3\",\n      },\n      {\n        word: \"chicken\",\n        translation: \"курица\",\n        image: \"img/words/chicken.jpg\",\n        audioSrc: \"audio/chicken.mp3\",\n      },\n      {\n        word: \"dog\",\n        translation: \"собака\",\n        image: \"img/words/dog.jpg\",\n        audioSrc: \"audio/dog.mp3\",\n      },\n      {\n        word: \"horse\",\n        translation: \"лошадь\",\n        image: \"img/words/horse.jpg\",\n        audioSrc: \"audio/horse.mp3\",\n      },\n      {\n        word: \"pig\",\n        translation: \"свинья\",\n        image: \"img/words/pig.jpg\",\n        audioSrc: \"audio/pig.mp3\",\n      },\n      {\n        word: \"rabbit\",\n        translation: \"кролик\",\n        image: \"img/words/rabbit.jpg\",\n        audioSrc: \"audio/rabbit.mp3\",\n      },\n      {\n        word: \"sheep\",\n        translation: \"овца\",\n        image: \"img/words/sheep.jpg\",\n        audioSrc: \"audio/sheep.mp3\",\n      },\n    ],\n    [\n      {\n        word: \"bird\",\n        translation: \"птица\",\n        image: \"img/words/bird.jpg\",\n        audioSrc: \"audio/bird.mp3\",\n      },\n      {\n        word: \"fish\",\n        translation: \"рыба\",\n        image: \"img/words/fish1.jpg\",\n        audioSrc: \"audio/fish.mp3\",\n      },\n      {\n        word: \"frog\",\n        translation: \"жаба\",\n        image: \"img/words/frog.jpg\",\n        audioSrc: \"audio/frog.mp3\",\n      },\n      {\n        word: \"giraffe\",\n        translation: \"жирафа\",\n        image: \"img/words/giraffe.jpg\",\n        audioSrc: \"audio/giraffe.mp3\",\n      },\n      {\n        word: \"lion\",\n        translation: \"лев\",\n        image: \"img/words/lion.jpg\",\n        audioSrc: \"audio/lion.mp3\",\n      },\n      {\n        word: \"mouse\",\n        translation: \"мышь\",\n        image: \"img/words/mouse.jpg\",\n        audioSrc: \"audio/mouse.mp3\",\n      },\n      {\n        word: \"turtle\",\n        translation: \"черепаха\",\n        image: \"img/words/turtle.jpg\",\n        audioSrc: \"audio/turtle.mp3\",\n      },\n      {\n        word: \"dolphin\",\n        translation: \"дельфин\",\n        image: \"img/words/dolphin.jpg\",\n        audioSrc: \"audio/dolphin.mp3\",\n      },\n    ],\n    [\n      {\n        word: \"skirt\",\n        translation: \"юбка\",\n        image: \"img/words/skirt.jpg\",\n        audioSrc: \"audio/skirt.mp3\",\n      },\n      {\n        word: \"pants\",\n        translation: \"брюки\",\n        image: \"img/words/pants.jpg\",\n        audioSrc: \"audio/pants.mp3\",\n      },\n      {\n        word: \"blouse\",\n        translation: \"блузка\",\n        image: \"img/words/blouse.jpg\",\n        audioSrc: \"audio/blouse.mp3\",\n      },\n      {\n        word: \"dress\",\n        translation: \"платье\",\n        image: \"img/words/dress.jpg\",\n        audioSrc: \"audio/dress.mp3\",\n      },\n      {\n        word: \"boot\",\n        translation: \"ботинок\",\n        image: \"img/words/boot.jpg\",\n        audioSrc: \"audio/boot.mp3\",\n      },\n      {\n        word: \"shirt\",\n        translation: \"рубашка\",\n        image: \"img/words/shirt.jpg\",\n        audioSrc: \"audio/shirt.mp3\",\n      },\n      {\n        word: \"coat\",\n        translation: \"пальто\",\n        image: \"img/words/coat.jpg\",\n        audioSrc: \"audio/coat.mp3\",\n      },\n      {\n        word: \"shoe\",\n        translation: \"туфли\",\n        image: \"img/words/shoe.jpg\",\n        audioSrc: \"audio/shoe.mp3\",\n      },\n    ],\n    [\n      {\n        word: \"sad\",\n        translation: \"грустный\",\n        image: \"img/words/sad.jpg\",\n        audioSrc: \"audio/sad.mp3\",\n      },\n      {\n        word: \"angry\",\n        translation: \"сердитый\",\n        image: \"img/words/angry.jpg\",\n        audioSrc: \"audio/angry.mp3\",\n      },\n      {\n        word: \"happy\",\n        translation: \"счастливый\",\n        image: \"img/words/happy.jpg\",\n        audioSrc: \"audio/happy.mp3\",\n      },\n      {\n        word: \"tired\",\n        translation: \"уставший\",\n        image: \"img/words/tired.jpg\",\n        audioSrc: \"audio/tired.mp3\",\n      },\n      {\n        word: \"surprised\",\n        translation: \"удивлённый\",\n        image: \"img/words/surprised.jpg\",\n        audioSrc: \"audio/surprised.mp3\",\n      },\n      {\n        word: \"scared\",\n        translation: \"испуганный\",\n        image: \"img/words/scared.jpg\",\n        audioSrc: \"audio/scared.mp3\",\n      },\n      {\n        word: \"smile\",\n        translation: \"улыбка\",\n        image: \"img/words/smile.jpg\",\n        audioSrc: \"audio/smile.mp3\",\n      },\n      {\n        word: \"laugh\",\n        translation: \"смех\",\n        image: \"img/words/laugh.jpg\",\n        audioSrc: \"audio/laugh.mp3\",\n      },\n    ],\n    [\n      {\n        word: \"pineapple\",\n        translation: \"ананас\",\n        image: \"img/words/pineapple.jpg\",\n        audioSrc: \"audio/pineapple.mp3\",\n      },\n      {\n        word: \"orange\",\n        translation: \"апельсин\",\n        image: \"img/words/orange.jpg\",\n        audioSrc: \"audio/orange.mp3\",\n      },\n      {\n        word: \"apple\",\n        translation: \"яблоко\",\n        image: \"img/words/apple.jpg\",\n        audioSrc: \"audio/apple.mp3\",\n      },\n      {\n        word: \"banana\",\n        translation: \"банан\",\n        image: \"img/words/banana.jpg\",\n        audioSrc: \"audio/banana.mp3\",\n      },\n      {\n        word: \"kiwi\",\n        translation: \"киви\",\n        image: \"img/words/kiwi.jpg\",\n        audioSrc: \"audio/kiwi.mp3\",\n      },\n      {\n        word: \"grapes\",\n        translation: \"виноград\",\n        image: \"img/words/grapes.jpg\",\n        audioSrc: \"audio/grapes.mp3\",\n      },\n      {\n        word: \"coconut\",\n        translation: \"кокос\",\n        image: \"img/words/coconut.jpg\",\n        audioSrc: \"audio/coconut.mp3\",\n      },\n      {\n        word: \"pear\",\n        translation: \"груша\",\n        image: \"img/words/pear.jpg\",\n        audioSrc: \"audio/pear.mp3\",\n      },\n    ],\n    [\n      {\n        word: \"potato\",\n        translation: \"картофель\",\n        image: \"img/words/potato.jpg\",\n        audioSrc: \"audio/potato.mp3\",\n      },\n      {\n        word: \"tomato\",\n        translation: \"помидор\",\n        image: \"img/words/tomato.jpg\",\n        audioSrc: \"audio/tomato.mp3\",\n      },\n      {\n        word: \"eggplant\",\n        translation: \"баклажан\",\n        image: \"img/words/eggplant.jpg\",\n        audioSrc: \"audio/eggplant.mp3\",\n      },\n      {\n        word: \"corn\",\n        translation: \"кукуруза\",\n        image: \"img/words/corn.jpg\",\n        audioSrc: \"audio/corn.mp3\",\n      },\n      {\n        word: \"carrot\",\n        translation: \"морковь\",\n        image: \"img/words/carrot.jpg\",\n        audioSrc: \"audio/carrot.mp3\",\n      },\n      {\n        word: \"mushroom\",\n        translation: \"гриб\",\n        image: \"img/words/mushroom.jpg\",\n        audioSrc: \"audio/mushroom.mp3\",\n      },\n      {\n        word: \"pea\",\n        translation: \"горох\",\n        image: \"img/words/pea.jpg\",\n        audioSrc: \"audio/pea.mp3\",\n      },\n      {\n        word: \"onion\",\n        translation: \"лук\",\n        image: \"img/words/onion.jpg\",\n        audioSrc: \"audio/onion.mp3\",\n      },\n    ],\n  ],\n};\n\nexport default cards;\n","import cards from \"../../data/cards\"\nimport { WordsAction, WordsActionTypes, WordsState } from \"../../types/words\"\n\nconst initialState: WordsState = cards\n\nexport const wordsReducer = (state = initialState, action: WordsAction): WordsState => {\n  switch(action.type) {\n    case WordsActionTypes.GET_WORDS:\n      return { ...state, wordsCategory: action.payload }\n    case WordsActionTypes.CLEAR_WORDS_CATEGORY:\n      return { ...state, wordsCategory: undefined }\n    default:\n      return state\n  }\n}","import WordModel from \"../models/word\";\n\nexport interface PlayState {\n  playMode: boolean;\n  start: boolean;\n  errors: number;\n  activeWord?: WordModel;\n  checks: boolean[];\n  endGame?: boolean;\n  words?: WordModel[];\n}\n\nexport enum PlayActionTypes {\n  TOGGLE_PLAY_MODE = \"TOGGLE_PLAY_MODE\",\n  PLAY_GAME = \"PLAY_GAME\",\n  RANDOM_WORD = \"RANDOM_WORD\",\n  PLAY_SOUND = \"PLAY_SOUND\",\n  CHECK_WORD = \"CHECK_WORD\",\n  END_GAME = \"END_GAME\",\n  RESUME_GAME = \"RESUME_GAME\"\n}\n\ninterface TogglePlayModeAction {\n  type: PlayActionTypes.TOGGLE_PLAY_MODE;\n}\n\ninterface PlayGameAction {\n  type: PlayActionTypes.PLAY_GAME;\n  words: WordModel[];\n}\n\ninterface RandomWordAction {\n  type: PlayActionTypes.RANDOM_WORD,\n  randomWord: WordModel;\n}\n\ninterface PlaySoundAction {\n  type: PlayActionTypes.PLAY_SOUND;\n}\n\ninterface CheckWordAction {\n  type: PlayActionTypes.CHECK_WORD;\n  checkWord: boolean;\n  word: WordModel;\n}\n\ninterface EndGameAction {\n  type: PlayActionTypes.END_GAME;\n}\n\ninterface ResumeGameAction {\n  type: PlayActionTypes.RESUME_GAME;\n}\n\nexport type PlayAction = TogglePlayModeAction | PlayGameAction | CheckWordAction | PlaySoundAction | EndGameAction | RandomWordAction | ResumeGameAction;\n","import { PlayAction, PlayActionTypes, PlayState } from \"../../types/play\"\n\nconst initialState: PlayState = {\n  playMode: false,\n  start: false,\n  words: [],\n  errors: 0,\n  checks: []\n}\n\nexport const playReducer = (state = initialState, action: PlayAction): PlayState => {\n  switch(action.type) {\n    case PlayActionTypes.TOGGLE_PLAY_MODE:\n      return { ...state, playMode: !state.playMode }\n    case PlayActionTypes.PLAY_GAME:\n      return {...state, start: true, words: action.words };\n    case PlayActionTypes.RANDOM_WORD:\n      return { ...state, activeWord: action.randomWord }\n    case PlayActionTypes.PLAY_SOUND:\n      return state\n    case PlayActionTypes.CHECK_WORD:\n      if(action.checkWord) {\n        return {\n          ...state,\n          words: state.words?.filter(word => word !== action.word),\n          checks: [...state.checks, action.checkWord]\n        }\n      }\n      return { ...state, errors: state.errors + 1, checks: [...state.checks, action.checkWord] }\n    case PlayActionTypes.END_GAME:\n      return { ...state, endGame: true }\n    case PlayActionTypes.RESUME_GAME:\n      return { ...initialState, playMode: state.playMode }\n    default:\n      return state\n  }\n}","import WordModel from \"../models/word\";\nimport { WordStateModel } from \"../models/word-state\";\n\nexport interface StatisticState {\n  data: WordStateModel[];\n  fieldFilter?: string;\n  ascFilter?: boolean;\n}\n\nexport enum StatisticActionTypes {\n  FETCH_STATISTIC = \"FETCH_STATISTIC\",\n  FILTER_STATISTIC = \"FILTER_STATISTIC\"\n}\n\ninterface FetchStatisticAction {\n  type: StatisticActionTypes.FETCH_STATISTIC;\n  data: WordStateModel[];\n}\n\ninterface FilterStatisticAction {\n  type: StatisticActionTypes.FILTER_STATISTIC;\n  field?: string,\n  asc?: boolean\n}\n\n\nexport type StatisticAction = FetchStatisticAction | FilterStatisticAction;\n","import { StatisticState, StatisticAction, StatisticActionTypes } from \"../../types/statistic\"\n\nconst initialState: StatisticState = {\n  data: []\n}\n\nexport const statisticReducer = (state = initialState, action: StatisticAction): StatisticState => {\n  switch(action.type) {\n    case StatisticActionTypes.FETCH_STATISTIC:\n      return { ...state, data: action.data }\n    case StatisticActionTypes.FILTER_STATISTIC:\n      return { ...state, fieldFilter: action.field, ascFilter: action.asc }\n    default:\n      return state\n  }\n}","import { combineReducers } from \"redux\";\n\nimport { headerReducer } from './headerReducer';\nimport { wordsReducer } from \"./wordsReducer\";\nimport { playReducer } from \"./playReducer\";\nimport { statisticReducer } from \"./statisticReducer\";\n\nexport const rootReducer = combineReducers({\n  header: headerReducer,\n  words: wordsReducer,\n  play: playReducer,\n  statistic: statisticReducer\n})\n\n\nexport type RootState = ReturnType<typeof rootReducer>","import {createStore} from 'redux';\nimport { rootReducer } from './reducers';\n\nexport const store = createStore(rootReducer)","import { store } from \"..\";\nimport { HeaderActionTypes } from \"../../types/header\";\n\nexport const toggleSidebar = () => {\n  return store.dispatch({ type: HeaderActionTypes.TOGGLE_SIDEBAR });\n}\n\nexport const setSidebar = (value: boolean) => {\n  return store.dispatch({ type: HeaderActionTypes.SET_SIDEBAR, value: value });\n}","import React, { Component } from \"react\";\nimport Card from \"../../card/Card\";\n\nimport {Link, NavLink} from 'react-router-dom';\n\nimport \"./menu-item.scss\";\nimport { setSidebar } from \"../../../store/actions/header\";\n\ninterface MenuItemProps {\n  title: string;\n  href: string;\n  card?: boolean;\n  image?: string;\n}\n\nclass MenuItem extends Component<MenuItemProps> {\n  render() {\n    return <li className=\"menu__item\">\n      <NavLink to={this.props.href} className='menu__item-link' onClick={() => setSidebar(false)}>\n        {this.props.card ? <Card class=\"menu__item-card\">\n          <img src={`/assets/${this.props.image}`} alt={this.props.title} />\n          {this.props.title}\n        </Card> : this.props.title}\n      </NavLink>\n    </li>\n  }\n}\n\n\nexport default MenuItem;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { isThisTypeNode } from 'typescript';\nimport CategoryModel from '../../models/category';\nimport MenuItem from './menu-item/MenuItem';\n\nimport './menu-items.scss';\n\ninterface MenuItemsProps {\n  categories: CategoryModel[],\n  visibleCard?: boolean,\n  class?: string,\n  children?: any\n}\n\nclass MenuItems extends Component<MenuItemsProps> {\n  render() {\n    return (\n      <ul className={this.props.class ? `menu__list ${this.props.class}` : `menu__list`}>\n        {this.props.children}\n        { this.props.categories.map(\n            (category: CategoryModel, index) => (\n              <MenuItem key={index} title={category.name} image={category.image} href={`/categories/${category.id}`} card={this.props.visibleCard} />\n            )\n          )\n        }\n      </ul>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return ({\n    categories: state.words.categories\n})}\nexport default connect(mapStateToProps)(MenuItems);","import React, { Component } from 'react';\nimport MenuItems from '../components/menu-items/MenuItems';\n\nclass MainPage extends Component {\n  render() {\n    return (\n      <main className=\"main-page container\">\n        <MenuItems visibleCard={true} class='grid' />\n      </main>\n    );\n  }\n}\n\nexport default MainPage;","import { store } from \"..\";\nimport cards from \"../../data/cards\";\nimport WordModel from \"../../models/word\";\nimport { WordsActionTypes } from \"../../types/words\";\n\nexport const getWords = (id: number) => {\n  const indexCategory = cards.categories.findIndex((category) => category.id === id);\n  const wordsCategory = cards.words.find((wordsCategory: WordModel[], index) => index === indexCategory);\n  if(wordsCategory) return store.dispatch({ type: WordsActionTypes.GET_WORDS, payload: wordsCategory });\n}\n\nexport const getWord = (categoryName: string, wordName: string) => {\n  const indexCategory = cards.categories.findIndex((category) => category.name === categoryName);\n  const word = cards.words[indexCategory].find((word: WordModel) => word.word === wordName);\n  return word;\n}\n\nexport const clearWords = () => {\n  return store.dispatch({ type: WordsActionTypes.CLEAR_WORDS_CATEGORY })\n}","import { store } from \"..\";\nimport { LSStateModel } from \"../../models/ls-state\";\nimport WordModel from \"../../models/word\";\nimport { WordStateModel } from \"../../models/word-state\";\nimport { StatisticActionTypes } from \"../../types/statistic\";\nimport { getWord } from \"./words\";\n\nfunction getPercentage(correct: number, incorrect: number): number {\n  return (correct * 100) / (correct + incorrect);\n}\n\nexport const addStatisticLS = (type: string, word?: string) => {\n  if(word) {\n    let stringState = localStorage.getItem(word);\n    if(!stringState) {\n      stringState = JSON.stringify({\n        correct: 0,\n        incorrect: 0,\n        trained: 0\n      })\n      localStorage.setItem(word, JSON.stringify(stringState))\n    }\n    let parseState = <LSStateModel>JSON.parse(stringState);\n    switch(type) {\n      case 'correct':\n        parseState.correct += 1;\n        break;\n      case 'incorrect':\n        parseState.incorrect += 1;\n        break;\n      default:\n        parseState.trained += 1;\n        break;\n    }\n    localStorage.setItem(word, JSON.stringify(parseState))\n  }\n}\n\nexport const resetStatistic = () => {\n  localStorage.clear();\n  store.dispatch({\n    type: StatisticActionTypes.FILTER_STATISTIC,\n    field: undefined,\n    asc: undefined\n  });\n  fetchStatistic();\n}\n\nexport const getHardWords = (): WordModel[] => {\n  let hardWords = fetchStatistic().sort((a: WordStateModel, b: WordStateModel) => {\n    if(a.incorrect < b.incorrect) return 1\n    return -1\n  }).filter((wordState: WordStateModel) => wordState.percentage > 0 && wordState.percentage < 100).slice(0, 8).map((wordState: WordStateModel) => getWord(wordState.category, wordState.word)).filter((word: WordModel | undefined) => word !== undefined);\n  \n  return <WordModel[]>hardWords;\n}\n\nexport const fetchStatistic = (fieldFilter?: string, ascFilter?: boolean) => {\n  const wordsState = store.getState().words;\n  const categories = wordsState.categories;\n  const words = wordsState.words;\n  let statistic = words\n    .map((wordsCategory: WordModel[], index: number) => {\n      return wordsCategory.map((word: WordModel) => {\n        let wordStatisticLS = localStorage.getItem(word.word);\n        if(!wordStatisticLS) {\n          const wordStatistic = JSON.stringify({\n            trained: 0,\n            correct: 0,\n            incorrect: 0,\n          })\n          localStorage.setItem(word.word, wordStatistic)\n          wordStatisticLS = wordStatistic\n        }\n        const parseWord = <LSStateModel>JSON.parse(wordStatisticLS);\n        return {\n          category: categories[index].name,\n          word: word.word,\n          translation: word.translation,\n          trained: parseWord.trained,\n          correct: parseWord.incorrect,\n          incorrect: parseWord.incorrect,\n          percentage: getPercentage(parseWord.correct, parseWord.incorrect),\n        };\n      });\n    })\n    .flat();\n  if(fieldFilter) {\n    statistic = statistic.sort(\n      (a: WordStateModel, b: WordStateModel) =>\n        (a[fieldFilter] > b[fieldFilter] && (ascFilter ? 1 : -1)) || (ascFilter ? -1 : 1)\n    );\n  }\n  store.dispatch({\n    type: StatisticActionTypes.FETCH_STATISTIC,\n    data: statistic,\n  })\n  return statistic;\n};\n\nexport const filterStatistic = (field, asc = true) => {\n  return store.dispatch({\n    type: StatisticActionTypes.FILTER_STATISTIC,\n    field: field,\n    asc: asc\n  });\n};\n","import { store } from \"..\";\nimport WordModel from \"../../models/word\";\nimport { PlayActionTypes } from \"../../types/play\";\nimport { addStatisticLS } from \"./statistic\";\n\nexport const togglePlayMode = () => {\n  store.dispatch({ type: PlayActionTypes.TOGGLE_PLAY_MODE });\n  resumeGame();\n}\n\nexport const play = () => {\n  let words = store.getState().words.wordsCategory;\n  (words && randomWord) && store.dispatch({ type: PlayActionTypes.PLAY_GAME, words: words })\n  randomWord();\n}\n\nexport const randomWord = () => {\n  const words = store.getState().play.words;\n  if(words) {\n    const randomWord = words[Math.floor(Math.random() * words.length)];\n    (words && randomWord) && store.dispatch({ type: PlayActionTypes.RANDOM_WORD, randomWord: randomWord })\n    playSound();\n  }\n}\n\nexport const playSound = () => {\n  const activeWord = store.getState().play.activeWord;\n  if(activeWord) {\n    const audio = new Audio(`/assets/${activeWord?.audioSrc}`);\n    audio.src = `https://wooordhunt.ru/data/sound/sow/uk/${activeWord?.word}.mp3`;\n    audio.play();\n  }\n}\n\nexport const checkWord = (word: WordModel) => {\n  const activeWord = store.getState().play.activeWord;\n  store.dispatch({ type: PlayActionTypes.CHECK_WORD, checkWord: activeWord === word, word: word })\n  \n  const words = store.getState().play.words;\n  if(words && words.length > 0) {\n    if(activeWord === word) {\n      const audio = new Audio(`/assets/audio/success.wav`);\n      audio.addEventListener('ended', () => randomWord());\n      audio.play();\n    }\n  } else {\n    endGame();\n  }\n\n  addStatisticLS(activeWord === word ? 'correct' : 'incorrect', activeWord?.word);\n\n  return activeWord === word;\n}\n\nexport const endGame = () => {\n  store.dispatch({ type: PlayActionTypes.END_GAME })\n}\n\nexport const resumeGame = () => {\n  return store.dispatch({ type: PlayActionTypes.RESUME_GAME })\n}","import React, { Component } from 'react'\nimport { togglePlayMode } from '../../store/actions/play';\n\nimport './switch-box.scss';\n\ninterface SwithBoxProps {\n  checked?: boolean\n}\n\nexport class SwitchBox extends Component<SwithBoxProps> {\n  render() {\n    return (\n      <>\n        <label className=\"switch\" >\n          <input type=\"checkbox\" checked={this.props.checked} onChange={() => togglePlayMode()}/>\n          <span className=\"slider round\">{this.props.checked ? <span>Train</span> : <span>Play</span>}</span>\n        </label>\n      </>\n    )\n  }\n}\n\n\n\nexport default SwitchBox;\n","import React, { Component } from \"react\";\nimport { SwitchBox } from \"../switch-box/SwitchBox\";\nimport { connect } from \"react-redux\";\nimport { toggleSidebar } from \"../../store/actions/header\";\n\nimport './header.scss';\nimport { play, playSound } from \"../../store/actions/play\";\n\nimport { Link } from 'react-router-dom';\nimport WordModel from \"../../models/word\";\n\ninterface HeaderProps {\n  playMode: boolean,\n  start: boolean,\n  words?: WordModel[];\n}\n\nclass Header extends Component<HeaderProps> {\n  render() {\n    return (\n      <>\n        <header className=\"header\" id=\"header\">\n          <nav className=\"nav container\">\n            <div onClick={() => toggleSidebar() } className=\"nav__toggle\">\n              <span className=\"nav__toggle-item\"></span>\n              <span className=\"nav__toggle-item\"></span>\n              <span className=\"nav__toggle-item\"></span>\n            </div>\n            <div className=\"nav__btns\">\n              <SwitchBox checked={!this.props.playMode} />\n              { this.props.playMode ? <button className=\"nav__btns-start\" onClick={() => this.props.start ? playSound() : play() } disabled={!this.props.words} >{ this.props.start ? <img src=\"/assets/img/icons/repeat.svg\" alt=\"Audio\" /> : 'Start'}</button>  : null }\n              <Link to=\"/statistic\" className=\"btn\">State</Link>\n            </div>\n          </nav>\n        </header>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n    playMode: state.play.playMode,\n    start: state.play.start,\n    words: state.words.wordsCategory\n})\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./checks-bar.scss\";\n\ninterface ChecksBarProps {\n  checks: boolean[];\n}\n\nclass ChecksBar extends Component<ChecksBarProps> {\n  render() {\n    return (\n      <div className=\"checks-bar\">\n        {this.props.checks.map((check, index) => (\n          <div className=\"checks-bar__item\" key={index}>\n            {check ? <span>&#9733;</span> : <span>&#9734;</span>}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  checks: state.play.checks,\n});\n\nexport default connect(mapStateToProps)(ChecksBar);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport WordModel from '../../../models/word'\nimport { checkWord } from '../../../store/actions/play';\nimport Card from '../../card/Card'\n\nimport { LSStateModel } from \"../../../models/ls-state\";\n\nimport './word-item.scss';\nimport { addStatisticLS } from '../../../store/actions/statistic';\n\ninterface WordProps {\n  word: WordModel,\n  playMode: boolean,\n  start: boolean\n}\n\nclass WordItem extends Component<WordProps> {\n  state = {\n    ...this.props.word,\n    playing: false,\n    flipped: false,\n    disabled: false\n  }\n\n  componentDidUpdate(prevProps) {\n    if(this.props.word !== prevProps.word) {\n      this.setState({ ...this.props.word, disabled: false })\n    }\n    if(this.props.start !== prevProps.start) {\n      this.setState({ disabled: false });\n    }\n  }\n\n  playAudio() {\n    if(!this.state.playing) {\n      let audio = new Audio();\n      // audio.src = `/assets/${this.state.audioSrc}`;\n      audio.src = `https://wooordhunt.ru/data/sound/sow/uk/${this.state.word}.mp3`;\n      this.setState({ playing: true })\n      audio.addEventListener('ended', () => this.setState({ playing: false }));\n      audio.play();\n    }\n  }\n\n  checkCard() {\n    if(checkWord(this.props.word)) {\n      this.setState({ disabled: true });\n    } else {\n      new Audio(`/assets/audio/error.wav`).play();\n    }\n  }\n\n  cardHandler() {\n    if(!this.props.playMode) {\n      this.playAudio();\n      addStatisticLS('trained', this.props.word.word)\n    } else if(this.props.start) {\n      this.checkCard();\n    }\n  }\n\n  render() {\n    return (\n      <div className={ this.state.flipped ? `word flipped` : `word`} onMouseLeave={() => this.setState({ flipped: false })} aria-disabled={this.state.disabled}>\n        <Card class=\"word__card\">\n          <div className=\"word__front\" onClick={() => this.cardHandler()}>\n            <div className=\"word__front-header\">\n              <img src={`/assets/${this.state.image}`} />\n            </div>\n            { !this.props.playMode && <div className=\"word__front-footer\">\n              <span className=\"word__name\">{this.state.word}</span>\n              <div onClick={(e) => {\n                e.stopPropagation();\n                this.setState({ flipped: true })}\n              } className=\"btn\"><img src=\"/assets/img/icons/rotate.svg\" alt=\"Rotate\" /></div>\n            </div>}\n          </div>\n          <div className=\"word__back\">{this.state.translation}</div>\n        </Card>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  playMode: state.play.playMode,\n  start: state.play.start\n})\n\nexport default connect(mapStateToProps)(WordItem);","import React, { Component } from 'react';\nimport WordModel from '../../models/word';\nimport WordItem from './word-item/WordItem';\n\ninterface WordsListParams {\n  words: WordModel[]\n}\n\nclass WordsList extends Component<WordsListParams> {\n  state = {\n    words: []\n  }\n\n  componentDidMount() {\n    this.setState({ words: this.props.words })\n  }\n\n  componentDidUpdate(prevProps) {\n    if(this.props !== prevProps) {\n      this.setState({ words: this.props.words })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"words__list grid\">\n        { this.state.words.map((word: WordModel, index) => <WordItem key={index} word={word} />)}\n      </div>\n    );\n  }\n}\n\nexport default WordsList;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ChecksBar from '../components/ChecksBar/ChecksBar';\nimport WordsList from '../components/words-list/WordsList';\nimport WordModel from '../models/word';\nimport { resumeGame } from '../store/actions/play';\nimport { clearWords, getWords } from '../store/actions/words';\nimport { Redirect } from 'react-router-dom';\n\nimport './category-page.scss';\n\ninterface CategoryPageState {\n  words?: WordModel[],\n  redirect: boolean\n}\n\ninterface CategoryPageProps {\n  match: any,\n  start: boolean,\n  errors: number,\n  endGame?: boolean\n}\n\nclass CategoryPage extends Component<CategoryPageProps, CategoryPageState> {\n  state = {\n    words: [],\n    redirect: false\n  }\n\n  changeWords() {\n    const category = this.props.match.params.category;\n    this.setState({ words: getWords(category)?.payload || []})\n  }\n\n  componentDidMount() {\n    this.changeWords();\n  }\n\n  componentDidUpdate(prevProps) {\n    if(this.props.match.params.category !== prevProps.match.params.category) {\n      resumeGame();\n      this.changeWords();\n    }\n  }\n\n  componentWillUnmount() {\n    resumeGame();\n    clearWords();\n  }\n\n  render() {\n    if(this.state.redirect) {\n      return <Redirect to='/home' />\n    }\n    if(this.props.endGame) {\n      setTimeout(() => {\n        this.setState({ redirect: true })\n      }, 1000)\n      return (\n        <main className=\"result-page container\">\n         <img src={ this.props.errors > 0 ? '/assets/img/failure.jpg' : '/assets/img/success.jpg'} alt=\"Result\" />\n         <span className=\"result-page__error\">{this.props.errors} Errors</span>\n        </main>\n      )\n    }\n\n    return (\n      <main className=\"category-page container\">\n        <ChecksBar />\n        <WordsList words={this.state.words} />\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  start: state.play.start,\n  errors: state.play.errors,\n  endGame: state.play.endGame\n})\nexport default connect(mapStateToProps)(CategoryPage);","import React, { Component } from \"react\";\nimport { toggleSidebar } from \"../../store/actions/header\";\nimport MenuItem from \"../menu-items/menu-item/MenuItem\";\nimport MenuItems from \"../menu-items/MenuItems\";\n\nimport './sidebar.scss';\n\ntype MenuProps = {\n  open: boolean;\n};\n\n\nexport class Sidebar extends Component<MenuProps> {\n  constructor(props: MenuProps) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <aside className={`menu ${ this.props.open ? 'show' : 'hidden'}`} onClick={ () => toggleSidebar() }>\n        <div className=\"menu__inner\" onClick={((e) => e.stopPropagation())}>\n          <MenuItems>\n            <MenuItem title=\"Main page\" href=\"/home\" />\n          </MenuItems>\n          {/* <div className=\"menu__btns\">\n            <button className=\"btn\">Login</button>\n          </div> */}\n        </div>\n      </aside>\n    );\n  }\n}\n\nexport default Sidebar;\n","import React, { Component } from 'react'\nimport { filterStatistic } from '../../../store/actions/statistic'\n\nimport './th.scss';\n\ninterface ThProps {\n  field: string,\n  fieldFilter?: string;\n  ascFilter?: boolean;\n}\n\nclass Th extends Component<ThProps> {\n  state = {\n    asc: true\n  }\n\n  filterStatistic() {\n    filterStatistic(this.props.field, this.state.asc);\n    this.setState({ asc: !this.state.asc });\n  }\n\n  render() {\n    return (\n      <th onClick={() => this.filterStatistic()}>\n        {this.props.children} { this.props.fieldFilter === this.props.field && (this.props.ascFilter ? <i className=\"arrow up\"></i> : <i className=\"arrow down\"></i>) }\n      </th>\n    )\n  }\n}\n\nexport default Th;\n","import React, { Component } from 'react'\n\nexport default class Td extends Component {\n  render() {\n    return (\n      <td>\n        {this.props.children}\n      </td>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { WordStateModel } from '../../../models/word-state';\nimport Td from '../td/Td'\n\nexport default class Tr extends Component<WordStateModel> {\n  render() {\n    return (\n      <tr>\n        <Td>{this.props.category}</Td>\n        <Td>{this.props.word}</Td>\n        <Td>{this.props.translation}</Td>\n        <Td>{this.props.trained}</Td>\n        <Td>{this.props.correct}</Td>\n        <Td>{this.props.incorrect}</Td>\n        <Td>{this.props.percentage | 0}</Td>\n      </tr>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { WordStateModel } from \"../../models/word-state\";\nimport { fetchStatistic, resetStatistic } from \"../../store/actions/statistic\";\n\nimport \"./statistic-table.scss\";\nimport Th from \"./th/Th\";\nimport Tr from \"./tr/Tr\";\n\ninterface FieldlModel {\n  title: string;\n  field: string;\n}\n\ninterface StatisticTableState {\n  fields: FieldlModel[];\n}\n\ninterface StatisticTableProps {\n  statistic: WordStateModel[];\n  fieldFilter?: string;\n  ascFilter?: boolean;\n}\n\nclass StatisticTable extends Component<\n  StatisticTableProps,\n  StatisticTableState\n> {\n  state = {\n    fields: [\n      {\n        title: \"Category\",\n        field: \"category\",\n      },\n      {\n        title: \"Word\",\n        field: \"word\",\n      },\n      {\n        title: \"Translation\",\n        field: \"translation\",\n      },\n      {\n        title: \"Trained\",\n        field: \"trained\",\n      },\n      {\n        title: \"Correct\",\n        field: \"correct\",\n      },\n      {\n        title: \"Incorrect\",\n        field: \"incorrect\",\n      },\n      {\n        title: \"%\",\n        field: \"percentage\",\n      },\n    ],\n  };\n\n  componentDidMount() {\n    fetchStatistic();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.fieldFilter !== prevProps.fieldFilter ||\n      this.props.ascFilter !== prevProps.ascFilter\n    ) {\n      fetchStatistic(this.props.fieldFilter, this.props.ascFilter);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"statistic-table__block\">\n        <table>\n          <thead>\n            <tr>\n              {this.state.fields.map((field: FieldlModel, index: number) => (\n                <Th\n                  key={index}\n                  field={field.field}\n                  fieldFilter={this.props.fieldFilter}\n                  ascFilter={this.props.ascFilter}\n                >\n                  {field.title}\n                </Th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.statistic.map(\n              (stateWord: WordStateModel, index: number) => (\n                <Tr {...stateWord} key={index} />\n              )\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  statistic: state.statistic.data,\n  fieldFilter: state.statistic.fieldFilter,\n  ascFilter: state.statistic.ascFilter,\n});\n\nexport default connect(mapStateToProps)(StatisticTable);\n","import React, { Component } from 'react'\nimport StatisticTable from '../components/statistic-table/StatisticTable'\nimport { resetStatistic } from '../store/actions/statistic'\n\nimport { Link } from 'react-router-dom';\n \nimport './statistic-page.scss';\n\nexport default class StatisticPage extends Component {\n  render() {\n    return (\n      <main className=\"statistic-page container\">\n        <div className=\"row row--flex-end\">\n          <Link to='/hardwords' className=\"btn\">Repeat difficult words</Link>\n          <button onClick={() => resetStatistic()} className=\"btn\">Reset</button>\n        </div>\n        <StatisticTable />\n      </main>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport WordsList from '../components/words-list/WordsList'\nimport WordModel from '../models/word'\nimport { getHardWords } from '../store/actions/statistic'\n\nclass HardwordsPage extends Component<{}, { hardwords: WordModel[] }> {\n  state = {\n    hardwords: []\n  }\n\n  componentDidMount() {\n    this.setState({ hardwords: getHardWords() })\n  }\n\n  render() {\n    return (\n      <main className=\"hardwords-page container\">\n        <WordsList words={this.state.hardwords} />\n      </main>\n    )\n  }\n}\n\nexport default HardwordsPage;\n","import React, { Component } from \"react\";\nimport MainPage from \"../../pages/MainPage\";\nimport Header from \"../header/Header\";\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\nimport \"./styles.scss\";\nimport CategoryPage from \"../../pages/CategoryPage\";\nimport { connect } from \"react-redux\";\nimport Sidebar from \"../sidebar/Sidebar\";\nimport StatisticPage from \"../../pages/StatisticPage\";\nimport HardwordsPage from \"../../pages/HardwordsPage\";\n\ninterface AppProps {\n  sidebar: boolean;\n}\n\nclass App extends Component<AppProps> {\n  render() {\n    return (\n      <>\n        <Router>\n          <Header />\n          <Sidebar open={this.props.sidebar} />\n          <Switch>\n            <Route path=\"/home\" exact>\n              <MainPage />\n            </Route>\n            <Route path=\"/statistic\" exact>\n              <StatisticPage />\n            </Route>\n            <Route path=\"/hardwords\" exact>\n              <HardwordsPage />\n            </Route>\n            <Route\n              path=\"/categories/:category\"\n              render={(matchProps) => <CategoryPage {...matchProps} />}\n            />\n            <Redirect to=\"/home\" />\n          </Switch>\n        </Router>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  sidebar: state.header.sidebar,\n});\nexport default connect(mapStateToProps)(App);\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/app';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}